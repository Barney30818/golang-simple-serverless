# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: member-crud
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: go1.x

# you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  environment:
    SQS_QUEUE_URL: { Ref: SendEmailQueue }
  iam:
    role: !Sub arn:aws:iam::${AWS::AccountId}:role/steveiamtest
    deploymentRole: ${self:custom.deploymentRole.${aws:accountId}, null}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tableName}"
    - Effect: Allow
      Action:
        - sqs:*
      Resource: "arn:aws:sqs:${aws:region}:${aws:accountId}:sqs/SendEmailQueue"
    


package:
  patterns:
      - '!./**'
      - ./bin/**



functions:
  createMember:
    handler: bin/createMember
    events:
      - httpApi:
          path: /createMember
          method: put

  getMember:
    handler: bin/getMember
    events:
      - httpApi:
          path: /getMember/{id}
          method: get

  sendEmail:
    handler: bin/sendEmail
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SendEmailQueue
              - Arn
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: false

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
custom:
  tableName: ${self:service}-${self:provider.stage}
  # sqsName: sendMail-${self:provider.stage}
  deploymentRole:
    # rnd
    801659726931: "arn:aws:iam::801659726931:role/C1NetworkRoleForRndStackDeploy"

resources:
  Resources:
  #dynamoDB configure
    MemberTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.tableName} # DynamoDB Table Name
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3

    SendEmailQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: SendEmailQueue